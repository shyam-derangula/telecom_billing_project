# Next.js Admin and User Dashboard with UI Components

This project is a comprehensive Next.js application featuring an admin dashboard, user dashboard, and a collection of reusable UI components. It provides a robust foundation for building modern web applications with advanced user interfaces and management capabilities.

## Project Description

This Next.js application is designed to offer a complete solution for user management, analytics, and customizable UI components. It consists of two main parts: an admin dashboard for managing users and analyzing data, and a user dashboard for individual account management.

The admin dashboard provides functionality for user management, plan management, billing, analytics, and support ticket handling. It features a dark mode toggle and a responsive layout for various screen sizes. The user dashboard allows individual users to view their subscription details, personal information, billing history, and manage child accounts.

Key features include:
- Responsive admin and user dashboards
- User management with search and filtering capabilities
- Subscription plan management
- Billing and invoice generation
- Analytics visualization with charts
- Support ticket system
- Dark mode support
- Customizable UI components library

The project utilizes modern React patterns and libraries such as React hooks, Next.js for server-side rendering, Tailwind CSS for styling, and various UI libraries for components like charts and carousels.

## Repository Structure

The repository is organized as follows:

- `app/`: Contains the main application pages and layouts
  * `admin-dashboard/`: Admin dashboard page
  * `user-dashboard/`: User dashboard page
  * `login/`: Login page
- `components/`: Reusable React components
  * `ui/`: UI components library (buttons, cards, dialogs, etc.)
- `hooks/`: Custom React hooks
- `lib/`: Utility functions and helpers
- `styles/`: Global styles and Tailwind CSS configuration

Key Files:
- `app/layout.tsx`: Main layout component for the application
- `tailwind.config.ts`: Tailwind CSS configuration
- `next.config.mjs`: Next.js configuration
- `package.json`: Project dependencies and scripts

## Usage Instructions

### Installation

1. Ensure you have Node.js (version 14 or later) installed on your system.
2. Clone the repository to your local machine.
3. Navigate to the project directory and run:
   ```
   npm install
   ```

### Getting Started

1. To start the development server, run:
   ```
   npm run dev
   ```
2. Open your browser and navigate to `http://localhost:3000`

### Configuration

- Customize the UI theme by modifying `tailwind.config.ts`
- Adjust Next.js settings in `next.config.mjs`

### Common Use Cases

1. Admin Dashboard:
   - Navigate to `/admin-dashboard` to access the admin interface
   - Manage users, plans, and view analytics

2. User Dashboard:
   - Navigate to `/user-dashboard` to access the user interface
   - View subscription details, billing information, and manage account settings

3. Using UI Components:
   ```jsx
   import { Button } from "@/components/ui/button"

   function MyComponent() {
     return <Button>Click me</Button>
   }
   ```

### Testing & Quality

To run tests (if implemented):
```
npm test
```

### Troubleshooting

Common issues:
1. Module not found errors:
   - Ensure all dependencies are installed by running `npm install`
   - Check import statements for correct paths

2. Styling issues:
   - Make sure Tailwind CSS is properly configured in `tailwind.config.ts`
   - Verify that the correct classes are applied to components

For more detailed debugging:
- Enable verbose logging in Next.js by setting the `DEBUG` environment variable:
  ```
  DEBUG=* npm run dev
  ```
- Check the browser console and server logs for error messages

## Data Flow

The application follows a typical React and Next.js data flow:

1. User interacts with the UI (e.g., clicks a button)
2. Event handler in the component is triggered
3. If necessary, the component updates its state using React hooks
4. For data fetching or updates, the component may call an API endpoint
5. The API processes the request and returns data
6. The component receives the data and updates its state
7. React re-renders the component with the new state

```
[User Interaction] -> [Component] -> [API Call] -> [Server]
                        ^                            |
                        |                            |
                        +------- [Data] <------------+
```

Note: This application uses mock data for demonstration purposes. In a production environment, you would replace the mock data with actual API calls to a backend server.
